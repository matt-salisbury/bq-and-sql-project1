--CREATE SCHEMA `dmn01-rsksoi-bld-01-2017`.dmn01_rsk_mvs_raw;

/*1. CREATE REQUIRED USER DEFINED FUNCTIONS*/

/*1A. CUMULATIVE NORMAL DISTRIBUTION FUNCTION*/
/*
ADAPTED FROM --https://formaldev.blogspot.com/2012/09/T-SQL-NORMDIST-5.html?m=1
Author:    Eli Algranti
Description:  Standard Normal Distribution
      Cumulative Distribution Function
      using a rational polynomial
      approximation to erf() from
      W. J. Cody 1969
*/

CREATE OR REPLACE PROCEDURE --IF NOT EXISTS
`dmn01-rsksoi-bld-01-2017`.dmn01_rsk_mvs_raw.StdNormalDistributionCDF_3 (
  input_tbl STRING
  ,input_col STRING
  ,output_tbl STRING
  ,output_col STRING
  )
BEGIN
  DECLARE pA0 FLOAT64 DEFAULT 3.209377589138469472562E03;
  DECLARE pA1 FLOAT64 DEFAULT 3.774852376853020208137E02;
  DECLARE pA2 FLOAT64 DEFAULT 1.138641541510501556495E02;
  DECLARE pA3 FLOAT64 DEFAULT 3.161123743870565596947E00;
  DECLARE pA4 FLOAT64 DEFAULT 1.857777061846031526730E-01;

  DECLARE qA0 FLOAT64 DEFAULT 2.844236833439170622273E03;
  DECLARE qA1 FLOAT64 DEFAULT 1.282616526077372275645E03;
  DECLARE qA2 FLOAT64 DEFAULT 2.440246379344441733056E02;
  DECLARE qA3 FLOAT64 DEFAULT 2.360129095234412093499E01;
  DECLARE qA4 FLOAT64 DEFAULT 1.000000000000000000000E00;

  DECLARE pB0 FLOAT64 DEFAULT 1.23033935479799725272E03;
  DECLARE pB1 FLOAT64 DEFAULT 2.05107837782607146532E03;
  DECLARE pB2 FLOAT64 DEFAULT 1.71204761263407058314E03;
  DECLARE pB3 FLOAT64 DEFAULT 8.81952221241769090411E02;
  DECLARE pB4 FLOAT64 DEFAULT 2.98635138197400131132E02;
  DECLARE pB5 FLOAT64 DEFAULT 6.61191906371416294775E01;
  DECLARE pB6 FLOAT64 DEFAULT 8.88314979438837594118E00;
  DECLARE pB7 FLOAT64 DEFAULT 5.64188496988670089180E-01;
  DECLARE pB8 FLOAT64 DEFAULT 2.15311535474403846343E-08;

  DECLARE qB0 FLOAT64 DEFAULT 1.23033935480374942043E03;
  DECLARE qB1 FLOAT64 DEFAULT 3.43936767414372163696E03;
  DECLARE qB2 FLOAT64 DEFAULT 4.36261909014324715820E03;
  DECLARE qB3 FLOAT64 DEFAULT 3.29079923573345962678E03;
  DECLARE qB4 FLOAT64 DEFAULT 1.62138957456669018874E03;
  DECLARE qB5 FLOAT64 DEFAULT 5.37181101862009857509E02;
  DECLARE qB6 FLOAT64 DEFAULT 1.17693950891312499305E02;
  DECLARE qB7 FLOAT64 DEFAULT 1.57449261107098347253E01;
  DECLARE qB8 FLOAT64 DEFAULT 1.00000000000000000000E00;

  DECLARE pC0 FLOAT64 DEFAULT -6.58749161529837803157E-04;
  DECLARE pC1 FLOAT64 DEFAULT -1.60837851487422766278E-02;
  DECLARE pC2 FLOAT64 DEFAULT -1.25781726111229246204E-01;
  DECLARE pC3 FLOAT64 DEFAULT -3.60344899949804439429E-01;
  DECLARE pC4 FLOAT64 DEFAULT -3.05326634961232344035E-01;
  DECLARE pC5 FLOAT64 DEFAULT -1.63153871373020978498E-02;

  DECLARE qC0 FLOAT64 DEFAULT 2.33520497626869185443E-03;
  DECLARE qC1 FLOAT64 DEFAULT 6.05183413124413191178E-02;
  DECLARE qC2 FLOAT64 DEFAULT 5.27905102951428412248E-01;
  DECLARE qC3 FLOAT64 DEFAULT 1.87295284992346047209E00;
  DECLARE qC4 FLOAT64 DEFAULT 2.56852019228982242072E00;
  DECLARE qC5 FLOAT64 DEFAULT 1.00000000000000000000E00;

  DECLARE pi FLOAT64 DEFAULT 3.141592653589793238462643383;

  EXECUTE IMMEDIATE
  "create or replace table "||output_tbl||" as" ||
  " with recursive int_calcs as" ||
  " (select *," ||
  " case when Z >=11.0 then 1" ||
  " when Z <= 0.46786 then" ||
  "   Z * ("||pA0||" + "||pA1||"*Z2 + "||pA2||"*Z4 + "||pA3||"*Z6 + "||pA4||"*Z8) /" ||
  "         ("||qA0||" + "||qA1||"*Z2 + "||qA2||"*Z4 + "||qA3||"*Z6 + "||qA4||"*Z8)" ||
  " when Z <= 4.0 then" ||
  "   1.0 - EXP(-Z2) * ("||pB0||" + "||pB1||"*Z + "||pB2||"*Z2 + "||pB3||"*Z3 + "||pB4||"*Z4" ||
  "                 + "||pB5||"*Z5 + "||pB6||"*Z6 + "||pB7||"*Z7 + "||pB8||"*Z8) /" ||
  "                 ("||qB0||" + "||qB1||"*Z + "||qB2||"*Z2 + "||qB3||"*Z3 + "||qB4||"*Z4" ||
  "                 + "||qB5||"*Z5 + "||qB6||"*Z6 + "||qB7||"*Z7 + "||qB8||"*Z8)" ||
  " else" ||
  "   (1 - EXP(-Z2)/Z * (1/SQRT("||pi||") + 1/(Z2)*" ||
  "               (("||pC0||" + "||pC1||"*Z2 + "||pC2||"*Z4 + "||pC3||"*Z6 + "||pC4||"*Z8 + "||pC5||"*Z10) /" ||
  "                 ("||qC0||" + "||qC1||"*Z2 + "||qC2||"*Z4 + "||qC3||"*Z6 + "||qC4||"*Z8 + "||qC5||"*Z10)))) END as ERF" ||
" from(select *" ||
"  , abs("||input_col||")/sqrt(2) as Z" ||
"  , (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) as Z2" ||
"  , (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) as Z3" ||
"  , (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) as Z4" ||
"  , (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) as Z5" ||
"  , (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) as Z6" ||
"  , (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) as Z7" ||
" , (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) as Z8" ||
"  , (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) * (abs("||input_col||")/sqrt(2)) as Z10" ||
"   from "||input_tbl||"))" ||
" select *," ||
" case when "||input_col||" > 0 then 0.5*(1+ERF)" ||
" else 1 - 0.5*(1+ERF) end as "||output_col||
" from int_calcs;";

 EXECUTE IMMEDIATE
  " alter table "||output_tbl||
  " drop column Z" ||
  " ,drop column Z2" ||
  " ,drop column Z3" ||
  " ,drop column Z4" ||
  " ,drop column Z5" ||
  " ,drop column Z6" ||
  " ,drop column Z7" ||
  " ,drop column Z8" ||
  " ,drop column Z10" ||
  " ,drop column ERF;";
END;

/*TEST NORMSDIST FUNCTION*/
--CALL `dmn01-rsksoi-bld-01-2017`.dmn01_rsk_mvs_raw.StdNormalDistributionCDF_3("dmn01_rsk_mvs_raw.T3", "normsinv_out", "`dmn01_rsk_mvs_raw`.T4", "normsdist_out");


/*1B. CREATE NORMSINV FUNCTION (INVERSE OF THE CUMULATIVE NORMAL DIST FUNCTION*/
/*BASED ON VB CODE FROM THIS SITE: --https://github.com/garcianc/PPND16/blob/master/ppnd16.vb
This site gives a VB translation of the FORTRAN code published in Michael J. Wichura, Applied Statistics, vol. 37, 1988, pp. 477-484*/
/*Returns 11 if input is outside of bounds of [0,1]*/

CREATE OR REPLACE PROCEDURE `dmn01-rsksoi-bld-01-2017`.dmn01_rsk_mvs_raw.normsinv (input_tbl string, input_col string, output_tbl string, output_col string)

BEGIN
  declare zero int64 default 0;
  declare one int64 default 1;
  declare half numeric(2,1) default 0.5;
  declare split1 decimal(4,3) default 0.425;
  declare split2 decimal(2,1) default 5.0;
  declare const1 float64 default 0.180625;
  declare const2 float64 default 1.6;

  declare a0 float64 default 3.3871328727963665;
  declare a1 float64 default 133.14166789178438;
  declare a2 float64 default 1971.5909503065514;
  declare a3 float64 default 13731.693765509461;
  declare a4 float64 default 45921.95393154987;
  declare a5 float64 default 67265.7709270087;
  declare a6 float64 default 33430.575583588128;
  declare a7 float64 default 2509.0809287301227;

  declare b1 float64 default 42.313330701600911;
  declare b2 float64 default 687.18700749205789;
  declare b3 float64 default 5394.1960214247511;
  declare b4 float64 default 21213.794301586597;
  declare b5 float64 default 39307.895800092709;
  declare b6 float64 default 28729.085735721943;
  declare b7 float64 default 5226.495278852544;

  declare c0 float64 default 1.4234371107496835;
  declare c1 float64 default 4.6303378461565456;
  declare c2 float64 default 5.769497221460691;
  declare c3 float64 default 3.6478483247632045;
  declare c4 float64 default 1.2704582524523684;
  declare c5 float64 default 0.24178072517745061;
  declare c6 float64 default 0.022723844989269184;
  declare c7 float64 default 0.00077454501427834139;

  declare d1 float64 default 2.053191626637759;
  declare d2 float64 default 1.6763848301838038;
  declare d3 float64 default 0.6897673349851;
  declare d4 float64 default 0.14810397642748008;
  declare d5 float64 default 0.0151986666563616457;
  declare d6 float64 default 0.00054759380849953455;
  declare d7 float64 default 0.0000000010507500716444169;

  declare e0 float64 default 6.6570946435011033;
  declare e1 float64 default 5.4637849111641144;
  declare e2 float64 default 1.7848265399172913;
  declare e3 float64 default 0.29656057182850487;
  declare e4 float64 default 0.026532189526576124;
  declare e5 float64 default 0.0012426609473880784;
  declare e6 float64 default 0.000027115555687434876;
  declare e7 float64 default 0.00000020103343992922882;

  declare f1 float64 default 0.599832206555888;
  declare f2 float64 default 0.13692988092273581;
  declare f3 float64 default 0.014875361290850615;
  declare f4 float64 default 0.00078686913114561329;
  declare f5 float64 default 0.000018463183175100548;
  declare f6 float64 default 0.0000001421511758316446;
  declare f7 float64 default 0.0000000000000020442631033899397;

  execute immediate
  "create or replace table "||output_tbl||" as"||
  " with recursive int_calc as" ||
  " (" ||
    " select *," ||
    " case when "||input_col||" >= 1 then 11" ||
    " when abs(q) <= "||split1||" then" ||
    " q * ((((((("||a7||"*r+"||a6||")*r+"||a5||")*r+"||a4||")*r+"||a3||")*r+"||a2||")*r+"||a1||")*r+"||a0||") / ((((((("||b7||"*r+"||b6||")*r+"||b5||")*r+"||b4||")*r+"||b3||")*r+"||b2||")*r+"||b1||")*r+"||one||")" ||

    " when abs(q) > "||split1||" and r < "||split2||" then" ||
    " ((((((("||c7||"*(r-"||const2||")+"||c6||")*(r-"||const2||")+"||c5||")*(r-"||const2||")+"||c4||")*(r-"||const2||")+"||c3||")*(r-"||const2||")+"||c2||")*(r-"||const2||")+"||c1||")*(r-"||const2||")+"||c0||") / ((((((("||d7||"*(r-"||const2||")+"||d6||")*(r-"||const2||")+"||d5||")*(r-"||const2||")+"||d4||")*(r-"||const2||")+"||d3||")*(r-"||const2||")+"||d2||")*(r-"||const2||")+"||d1||")*(r-"||const2||")+"||one||")" ||

    " else ((((((("||e7||"*(r-"||split2||")+"||e6||")*(r-"||split2||")+"||e5||")*(r-"||split2||")+"||e4||")*(r-"||split2||")+"||e3||")*(r-"||split2||")+"||e2||")*(r-"||split2||")+"||e1||")*(r-"||split2||")+"||e0||") / ((((((("||f7||"*(r-"||split2||")+"||f6||")*(r-"||split2||")+"||f5||")*(r-"||split2||")+"||f4||")*(r-"||split2||")+"||f3||")*(r-"||split2||")+"||f2||")*(r-"||split2||")+"||f1||")*(r-"||split2||")+"||one||")" ||
    " end as ppnd16_int" ||

    " from (select *, ("||input_col||" - "||half||") as q," ||
    " case when abs("||input_col||" - "||half||") <= "||split1||" then "||const1||" - power(("||input_col||" - "||half||"), 2)" ||
    " when "||input_col||" >= 1 then 0.1" ||
    " when (abs("||input_col||" - "||half||") > "||split1||") and ("||input_col||" < "||half||") then sqrt(-log("||input_col||"))" ||
    " else sqrt(-log((1 - "||input_col||"))) end as r," ||
    " from " ||input_tbl||
    " )" ||
  " )" ||
  " select *," ||
  " case when (abs("||input_col||" - "||half||") > "||split1||") and ("||input_col||" < "||half||") then - ppnd16_int" ||
  " else ppnd16_int end as "||output_col||
  " from int_calc" ||
  " order by "||input_col||";";

  EXECUTE IMMEDIATE
   " alter table "||output_tbl||
   " drop column  q" ||
   " ,drop column r" ||
   " ,drop column ppnd16_int;";

END;

/*TEST NORMSINV FUNCTION*/
--CALL `dmn01-rsksoi-bld-01-2017`.dmn01_rsk_mvs_raw.normsinv("`dmn01_rsk_mvs_raw`.T1", "prop", "`dmn01_rsk_mvs_raw`.T3", "normsinv_out");


/*2. CREATE SIMULATED TABLE WITH 1 MILLION RECORDS*/

/*2A. CREATE INITIAL VARIABLE FOR TABLE*/
/*--https://dba.stackexchange.com/questions/130392/generate-and-insert-1-million-rows-into-simple-table*/
/*NB: NEED TO UPDATE ROW COUNT (/100 AS p) IN BELOW CALCULATION, DEPENDING ON TABLE SIZE*/

CREATE OR REPLACE TABLE dmn01_rsk_mvs_raw.T1 AS
WITH RECURSIVE Ten AS
(
  SELECT 1  as one UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL
  SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL
  SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1
)
SELECT
row_number() over() AS id,
(row_number() over())/100 AS prop
FROM Ten
CROSS JOIN Ten T100
CROSS JOIN Ten T1000
--CROSS JOIN Ten T10000
--CROSS JOIN Ten T100000
--CROSS JOIN Ten T1000000
--CROSS JOIN Ten T10000000
--ORDER BY id
;


/*3. CREATE A RANDOM VARIABLE FOR EACH ROW - NB: GOOGLE STANDARD SQL DOES NOT ALLOW SEEDING OF RAND() FUNCTION - THEREFORE DIFFERENT APPROACH TO 3 USED (SHA256 IN STEP4)*/

/*3A. CREATE A VIEW THAT RETURNS SELECT RAND()*/

--create or replace view dmn01_rsk_mvs_raw.cr_sample_randView as
--select rand() as random_number;

/*3B. CREATE A UDF THAT SELECTS THE VALUE FROM THE VIEW*/

--create or replace function dmn01_rsk_mvs_raw.cr_sample_fnPerRowRand() as (
--  (select random_number from dmn01_rsk_mvs_raw.cr_sample_randView)
--);

/*3C. Before selecting your data, seed the rand() function, and then use the UDF in your select statement.*/
--select rand(200); --see the rand() function
--with cte(id) as
--(select row_number() over(order by object_id) from sys.all_objects)
--select
--  id,
--  dbo.cr_sample_fnPerRowRand()
--from cte
--where id <= 1000  --limit the results to 1000 random numbers

/*4. BUILDING THE TABLE OUT TO CREATE THE TABLE REQUIRED AS INPUT TABLE TO RWA CALCUATION*/

/*4a. Define the fields in the table*/
ALTER TABLE dmn01_rsk_mvs_raw.T1
  ADD COLUMN ACC_OWNER_ID string
  ,ADD COLUMN START_DATE date
  ,ADD COLUMN R_PD float64
  ,ADD COLUMN PRODUCT string
  ,ADD COLUMN SUB_PRODUCT string
  ,ADD COLUMN CRE_FLAG int64
  ,ADD COLUMN Reg_CCF float64
  ,ADD COLUMN DRAWN float64
  ,ADD COLUMN PROVISIONS float64
  ,ADD COLUMN UNDRAWN float64
  ,ADD COLUMN DEFAULT_STATUS string
  ,ADD COLUMN COUNTRY string
  ,ADD COLUMN ASSET_CLASS_IND int64
  ,ADD COLUMN RISK_GRADE int64
  ,ADD COLUMN BU_ID int64
  ,ADD COLUMN BUS_UNIT string
  ,ADD COLUMN SUB_BUSINESS_UNIT_NAME string
  ,ADD COLUMN PRA_ASSET_CLASS string
  ,ADD COLUMN SECTOR string
  ,ADD COLUMN LEGAL_ENTITY string
  ,ADD COLUMN DEFAULT_IND int64
  ,ADD COLUMN RWA_SCALING int64 /*Using this field as the indicator for the FI Asset Correlation Scalar Indicator: if 0 then scalar = 1, if 1 then scalar = 1.25*/
  ,ADD COLUMN BASEL_APPROACH string
  ,ADD COLUMN BASEL_ASSET_CLASS string
  ,ADD COLUMN SLOTTING_CATEGORY int64
  ,ADD COLUMN MATURITY float64
  ,ADD COLUMN TURNOVER float64
  ,ADD COLUMN SME_SCALAR_IND int64
  ,ADD COLUMN SME_SCALAR_VALUE float64
  ,ADD COLUMN RATING_ID string
  ,ADD COLUMN LGD_EXTERNAL float64
  ,ADD COLUMN R_EAD float64
  ,ADD COLUMN RAND_NORM_1 float64
  ,ADD COLUMN RAND_NORM_2 float64
  ,ADD COLUMN RAND_UNIF_1 float64
  ,ADD COLUMN RAND_UNIF_2 float64
  ,ADD COLUMN R_ASSET_CORRELATION float64
  ,ADD COLUMN b float64
  ,ADD COLUMN N float64
  ,ADD COLUMN K float64
  ,ADD COLUMN RW float64
  ,ADD COLUMN RWA float64
  ,ADD COLUMN R_EL float64;

/*4b. Simulate key variables, Step 1: Use Random Normal Variables to Generate Drawn and Undrawn.  Also allocate "||input_col||"ortions of the population to asset classes*/
/*For ref on using FARM_FINGERPRINT: --https://stackoverflow.com/questions/46019624/how-to-do-repeatable-sampling-in-bigquery-standard-sql*/

UPDATE dmn01_rsk_mvs_raw.T1
  SET PRODUCT = 'GC (exc CRE)'
  ,CRE_FLAG = 0
  ,Reg_CCF = 0.75
  ,DRAWN = (SQRT(-2*LOG(abs(cast("0x"||substring(to_hex(sha256(cast(id as string))), 61, 64) as int64))/100000.000))*SIN(2*ACOS(-1)*abs(cast("0x"||substring(to_hex(sha256(cast(id+1 as string))), 61, 64) as int64))/100000.000)) * 6000000 + 2000000 /*random normal with mean 2,000,000 and standard deviation 6,000,000*/
  --,PROVISIONS = dmn01_rsk_mvs_raw.cr_sample_fnPerRowRand()
  ,UNDRAWN = (SQRT(-2*LOG(abs(cast("0x"||substring(to_hex(sha256(cast(id+2 as string))), 61, 64) as int64))/100000.000))*SIN(2*ACOS(-1)*abs(cast("0x"||substring(to_hex(sha256(cast(id+3 as string))), 61, 64) as int64))/100000.000)) * 12000000 + 3000000 /*random normal with mean 3,000,000 and standard deviation 12,000,000*/
  --,DEFAULT_STATUS varchar(10)
  --,COUNTRY varchar(100)
  --,ASSET_CLASS_IND int
  --,RISK_GRADE int
  --,BU_ID int
  --,BUS_UNIT varchar(50)
  --,SUB_BUSINESS_UNIT_NAME varchar(50)
  --,PRA_ASSET_CLASS varchar(50)
  --,SECTOR varchar(50)
  --,LEGAL_ENTITY varchar(50)
  --,DEFAULT_IND int
  ,RWA_SCALING =
  CASE WHEN prop <= 0.07 AND prop >0 THEN 1
  WHEN prop <= 0.9 and prop > 0.88 THEN 1
  ELSE 0 END
  ,BASEL_APPROACH =
  CASE WHEN prop > 0.9 THEN 'Standardised'
  ELSE 'F-IRB' END
  ,BASEL_ASSET_CLASS =
  CASE WHEN prop <= 0.75 AND prop > 0 THEN 'CORPORATES - MAIN'
  WHEN prop <= 0.85 AND prop >0.75 THEN 'CORPORATES - SME'
  WHEN prop <= 0.9 AND prop >0.85 THEN 'INSTITUTIONS'
  WHEN prop <= 0.98 AND prop >0.9 THEN 'CORPORATES'
  WHEN prop <= 0.9 THEN 'INSTITUTIONS' END
  --,SLOTTING_CATEGORY int
  ,MATURITY = (SQRT(-2*LOG(abs(cast("0x"||substring(to_hex(sha256(cast(id+4 as string))), 61, 64) as int64))/100000.000))*SIN(2*ACOS(-1)*abs(cast("0x"||substring(to_hex(sha256(cast(id+5 as string))), 61, 64) as int64))/100000.000)) * 1.5 + 2.5 /*random normal with mean 2,000,000 and standard deviation 6,000,000*/
  ,TURNOVER = (SQRT(-2*LOG(abs(cast("0x"||substring(to_hex(sha256(cast(id+6 as string))), 61, 64) as int64))/100000.000))*SIN(2*ACOS(-1)*abs(cast("0x"||substring(to_hex(sha256(cast(id+7 as string))), 61, 64) as int64))/100000.000)) * 10 + 25 /*random normal with mean 2,000,000 and standard deviation 6,000,000*/
  ,SME_SCALAR_IND =
  CASE WHEN prop <= 0.85 AND prop > 0.75 THEN 1 /*F-IRB Corporate SME all set to have SME scalar*/
  WHEN prop <= 0.75 AND prop > 0.72 THEN 1 /*F-IRB Corporate Main: small portion set to have SME scalar*/
  WHEN prop <= 0.86 AND prop > 0.85 THEN 1 /*F-IRB Institutions: small portion set to have SME scalar*/
  ELSE 0 END
  ,SME_SCALAR_VALUE =
  CASE WHEN prop <= 0.85 AND prop > 0.75 THEN 0.7619 /*F-IRB Corporate SME all set to have SME scalar*/
  WHEN prop <= 0.75 AND prop > 0.72 THEN 0.7619 /*F-IRB Corporate Main: small portion set to have SME scalar*/
  WHEN prop <= 0.86 AND prop > 0.85 THEN 0.7619 /*F-IRB Institutions: small portion set to have SME scalar*/
  ELSE 1 END
  ,RATING_ID = 'corp'
  ,LGD_EXTERNAL = 45/100.00
  --,R_EAD float
  ,RAND_NORM_1 = (SQRT(-2*LOG(abs(cast("0x"||substring(to_hex(sha256(cast(id+8 as string))), 61, 64) as int64))/100000.000))*SIN(2*ACOS(-1)*abs(cast("0x"||substring(to_hex(sha256(cast(id+9 as string))), 61, 64) as int64))/100000.000))
  ,RAND_NORM_2 = (SQRT(-2*LOG(abs(cast("0x"||substring(to_hex(sha256(cast(id+10 as string))), 61, 64) as int64))/100000.000))*SIN(2*ACOS(-1)*abs(cast("0x"||substring(to_hex(sha256(cast(id+11 as string))), 61, 64) as int64))/100000.000))
  ,RAND_UNIF_1 = abs(cast("0x"||substring(to_hex(sha256(cast(id+12 as string))), 61, 64) as int64))/100000.000
  ,RAND_UNIF_2 = abs(cast("0x"||substring(to_hex(sha256(cast(id+13 as string))), 61, 64) as int64))/100000.000
  WHERE true;



/*4c. Merge on rating information to generate PDs and Provision rates.
To control distribution across rating grades, took "||input_col||"ortions from Global Corporates (exc CRE) Dec, generated cumulative percentiles, turned those into thresholds in normal space
and then compared random norm variables to thresholds.
This step merges on info based on the random normal variable outturn compared to the thresholds
RATING_INFO table imported into DB as a csv file*/

create or replace table dmn01_rsk_mvs_raw.T2 as
select *
from dmn01_rsk_mvs_raw.T1
join dmn01_rsk_mvs_raw.RATING_INFO
--option SUBINTERVAL
on T1.RAND_NORM_1 < RATING_INFO.FREQ_THRESH_UPPER and T1.RAND_NORM_1 >= RATING_INFO.FREQ_THRESH_LOWER;

drop table dmn01_rsk_mvs_raw.T1;

/*4d. Cap and Floor fields where ap"||input_col||"riate (wouldn't need to do that if 'Greatest' and 'Least' functions supported).
Also make 'second step' adjustments where field values depend on outcomes of first update*/

UPDATE dmn01_rsk_mvs_raw.T2
  SET
  R_PD = R_PD_PC/100.0000
  ,DRAWN =
  CASE WHEN DRAWN < 0 THEN 0
  ELSE DRAWN END

  ,UNDRAWN =
  CASE WHEN UNDRAWN < 0 THEN 0
  ELSE UNDRAWN END

  ,PROVISIONS =
  CASE WHEN (DRAWN < 0) AND (UNDRAWN < 0) THEN 0
  WHEN (DRAWN < 0) AND (UNDRAWN >0) THEN UNDRAWN * 0.5 * PROV_RATE_PC
  WHEN (DRAWN > 0) AND (UNDRAWN <0) THEN DRAWN * PROV_RATE_PC
  ELSE (DRAWN + 0.5 * UNDRAWN) * PROV_RATE_PC END

  ,DEFAULT_STATUS =
  CASE WHEN CMS_RATING = 20 THEN 'DEF'
  ELSE 'NOT_DEF' END

  ,COUNTRY =
  /*BOS COUNTRY DISTRIBUTION*/
  CASE WHEN (RAND_UNIF_1 <= 0.09580038) AND (RAND_UNIF_2 <= 0.002325581) THEN 'AMERICAS'
  WHEN (RAND_UNIF_1 <= 0.09580038) AND (RAND_UNIF_2 > 0.002325581) AND (RAND_UNIF_2 <= 0.004651163) THEN 'MIDDLE EAST'
  WHEN (RAND_UNIF_1 <= 0.09580038) AND (RAND_UNIF_2 > 0.004651163) AND (RAND_UNIF_2 <= 0.990697674) THEN 'UNITED KINGDOM OF GREAT BRITAIN AND NORTHERN IRELAND'
  WHEN (RAND_UNIF_1 <= 0.09580038) AND (RAND_UNIF_2 > 0.990697674) AND (RAND_UNIF_2 <= 1) THEN 'UNITED STATES OF AMERICA'

  /*LLOYDS COUNTRY DISTRIBUTION*/
  WHEN (RAND_UNIF_1 > 0.09580038) AND (RAND_UNIF_1 <= 0.84159519) AND (RAND_UNIF_2 <= 0.0003970881) THEN 'AFRICA'
  WHEN (RAND_UNIF_1 > 0.09580038) AND (RAND_UNIF_1 <= 0.84159519) AND (RAND_UNIF_2 > 0.0003970881) AND (RAND_UNIF_2 <= 0.0018937284) THEN 'AMERICAS'
  WHEN (RAND_UNIF_1 > 0.09580038) AND (RAND_UNIF_1 <= 0.84159519) AND (RAND_UNIF_2 > 0.0018937284) AND (RAND_UNIF_2 <= 0.005426870) THEN 'ASIA'
  WHEN (RAND_UNIF_1 > 0.09580038) AND (RAND_UNIF_1 <= 0.84159519) AND (RAND_UNIF_2 > 0.005426870) AND (RAND_UNIF_2 <= 0.060754467) THEN 'EURO AREA'
  WHEN (RAND_UNIF_1 > 0.09580038) AND (RAND_UNIF_1 <= 0.84159519) AND (RAND_UNIF_2 > 0.060754467) AND (RAND_UNIF_2 <= 0.064857710) THEN 'GERMANY'
  WHEN (RAND_UNIF_1 > 0.09580038) AND (RAND_UNIF_1 <= 0.84159519) AND (RAND_UNIF_2 > 0.064857710) AND (RAND_UNIF_2 <= 0.070284580) THEN 'OTHER EUROPE'
  WHEN (RAND_UNIF_1 > 0.09580038) AND (RAND_UNIF_1 <= 0.84159519) AND (RAND_UNIF_2 > 0.070284580) AND (RAND_UNIF_2 <= 0.9522171) THEN 'UNITED KINGDOM OF GREAT BRITAIN AND NORTHERN IRELAND'
  WHEN (RAND_UNIF_1 > 0.09580038) AND (RAND_UNIF_1 <= 0.84159519) AND (RAND_UNIF_2 > 0.9522171) THEN 'UNITED STATES OF AMERICA'

  /*LLOYDS COUNTRY DISTRIBUTION*/
  WHEN (RAND_UNIF_1 > 0.84159519) AND (RAND_UNIF_2 <= 0.001779359) THEN 'AMERICAS'
  WHEN (RAND_UNIF_1 > 0.84159519) AND (RAND_UNIF_2 > 0.001779359) AND (RAND_UNIF_2 <= 0.049822064) THEN 'ASIA'
  WHEN (RAND_UNIF_1 > 0.84159519) AND (RAND_UNIF_2 > 0.049822064) AND (RAND_UNIF_2 <= 0.078291815) THEN 'EURO AREA'
  WHEN (RAND_UNIF_1 > 0.84159519) AND (RAND_UNIF_2 > 0.078291815) AND (RAND_UNIF_2 <= 0.080071174) THEN 'GERMANY'
  WHEN (RAND_UNIF_1 > 0.84159519) AND (RAND_UNIF_2 > 0.080071174) AND (RAND_UNIF_2 <= 0.122775801) THEN 'OTHER EUROPE'
  WHEN (RAND_UNIF_1 > 0.84159519) AND (RAND_UNIF_2 > 0.122775801) AND (RAND_UNIF_2 <= 0.4252669) THEN 'UNITED KINGDOM OF GREAT BRITAIN AND NORTHERN IRELAND'
  WHEN (RAND_UNIF_1 > 0.84159519) AND (RAND_UNIF_2 > 0.4252669) THEN 'UNITED STATES OF AMERICA'

  END

  ,ASSET_CLASS_IND =
  CASE WHEN BASEL_ASSET_CLASS = 'CORPORATES - SME' THEN 2
  WHEN BASEL_ASSET_CLASS = 'RETAIL, OF WHICH SME' THEN 3
  WHEN BASEL_ASSET_CLASS = 'RETAIL MORTGAGES' THEN 4
  WHEN BASEL_ASSET_CLASS = 'SUPERVISORY SLOTTING' THEN 5
  WHEN BASEL_APPROACH ='Standardised' THEN 6
  WHEN RWA_SCALING = 1 THEN 7
  ELSE 1 END

  ,RISK_GRADE = CMS_RATING
  --,BU_ID int
  --,BUS_UNIT varchar(50)
  --,SUB_BUSINESS_UNIT_NAME varchar(50)
  --,PRA_ASSET_CLASS varchar(50)
  --,SECTOR varchar(50)

  ,LEGAL_ENTITY =
  CASE WHEN RAND_UNIF_1 <= 0.09580038 THEN 'BOS'
  WHEN (RAND_UNIF_1 > 0.09580038) AND (RAND_UNIF_1 <= 0.84159519) THEN 'LLOY'
  WHEN (RAND_UNIF_1 > 0.84159519) AND (RAND_UNIF_1 <= 1) THEN 'LBCM'
  END

  ,DEFAULT_IND =
  CASE WHEN CMS_RATING = 20 THEN 1
  ELSE 0 END
  --,RWA_SCALING float
  --,SLOTTING_CATEGORY int
  ,MATURITY =
  CASE WHEN MATURITY < 1 THEN 1
  WHEN MATURITY > 5 THEN 5
  ELSE MATURITY END

  ,TURNOVER =
  CASE WHEN TURNOVER < 5 THEN 5
  WHEN TURNOVER > 50 THEN 50
  ELSE TURNOVER END

  --,SME_SCALAR
  --,RATING_ID
  --,LGD_EXTERNAL

  ,R_EAD =
  CASE WHEN (DRAWN < 0) AND (UNDRAWN < 0) THEN 0
  WHEN (DRAWN < 0) AND (UNDRAWN > 0) THEN Reg_CCF * UNDRAWN
  WHEN (DRAWN > 0) AND (UNDRAWN < 0) THEN DRAWN
  ELSE DRAWN + Reg_CCF * UNDRAWN END

  WHERE true;

/*NEED TO THINK ABOUT DOING THIS FOR EACH BU - I.E "||input_col||"ORTIONS TAKEN FOR EACH BU*/

/*5. CALCULATE RWA*/

UPDATE dmn01_rsk_mvs_raw.T2
  SET
  R_ASSET_CORRELATION =
  CASE WHEN ASSET_CLASS_IND = 1 THEN
  0.12 * (1 - EXP(-50 * R_PD))/(1 - EXP(-50)) + 0.24 * (1 - (1 - EXP(-50 * R_PD))/(1 - EXP(-50)))
  WHEN ASSET_CLASS_IND = 2 THEN
  0.12 * (1 - EXP(-50 * R_PD))/(1 - EXP(-50)) + 0.24 * (1 - (1 - EXP(-50 * R_PD))/(1 - EXP(-50))) - 0.04 * (1 - (TURNOVER - 5)/45)
  WHEN ASSET_CLASS_IND = 3 THEN
  0.03 * (1 - EXP(-35 * R_PD))/(1 - EXP(-35)) + 0.16 * (1 - (1 - EXP(-35 * R_PD))/(1 - EXP(-35)))
  WHEN ASSET_CLASS_IND = 4 THEN
  0.15
  WHEN ASSET_CLASS_IND = 7 THEN
  (0.12 * (1 - EXP(-50 * R_PD))/(1 - EXP(-50)) + 0.24 * (1 - (1 - EXP(-50 * R_PD))/(1 - EXP(-50)))) * 1.25
  END

  ,b=POWER((0.11852 - 0.05478 * LOG(R_PD)),2)
  WHERE true;

CALL `dmn01-rsksoi-bld-01-2017`.dmn01_rsk_mvs_raw.normsinv("dmn01_rsk_mvs_raw.T2", "R_PD", "dmn01_rsk_mvs_raw.T3", "R_PD_NORMSINV");

UPDATE dmn01_rsk_mvs_raw.T3
  SET
  N =
  POWER((1 - R_ASSET_CORRELATION),-0.5)*R_PD_NORMSINV+POWER((R_ASSET_CORRELATION/(1 - R_ASSET_CORRELATION)),0.5)*3.090232
  WHERE true;

CALL `dmn01-rsksoi-bld-01-2017`.dmn01_rsk_mvs_raw.StdNormalDistributionCDF_3("dmn01_rsk_mvs_raw.T3", "N", "dmn01_rsk_mvs_raw.T4", "NORMSDIST_N");

UPDATE dmn01_rsk_mvs_raw.T4
  SET
  K =
  CASE WHEN ASSET_CLASS_IND = 1 THEN
  (NORMSDIST_N - R_PD) / (1 - 1.5*b) * (1 + (MATURITY - 2.5) * b) * SME_SCALAR_VALUE END

  ,RW =
  /*RW = K * LGD * 12.5 * 1.06*/
  CASE WHEN ASSET_CLASS_IND = 1 THEN
  (NORMSDIST_N - R_PD) / (1 - 1.5*b) * (1 + (MATURITY - 2.5) * b) * SME_SCALAR_VALUE * LGD_EXTERNAL * 12.5 * 1.06 END

  ,RWA =
  /*RWA = RW * R_EAD*/
  CASE WHEN ASSET_CLASS_IND <= 2 OR ASSET_CLASS_IND = 7 THEN
  (NORMSDIST_N - R_PD) / (1 - 1.5*b) * (1 + (MATURITY - 2.5) * b) * SME_SCALAR_VALUE * LGD_EXTERNAL * 12.5 * 1.06 * R_EAD
  WHEN ASSET_CLASS_IND >= 3 AND ASSET_CLASS_IND <=4 THEN
  (NORMSDIST_N - R_PD) * SME_SCALAR_VALUE * LGD_EXTERNAL * 12.5 * 1.06 * R_EAD END

  ,R_EL = R_PD * LGD_EXTERNAL * R_EAD
  WHERE true;
