CREATE DATABASE DB_SIMULATED_RWA;
USE DB_SIMULATED_RWA;

/*1. CREATE REQUIRED USER DEFINED FUNCTIONS*/

/*1A. CUMULATIVE NORMAL DISTRIBUTION FUNCTION*/
/*Adapted from --https://stackoverflow.com/questions/4417005/how-can-we-achieve-standard-normal-cdf-in-oracle-sql-or-pl-sql*/
if object_id('normsdist') is not null
BEGIN
  DROP FUNCTION normsdist
END
GO

CREATE FUNCTION dbo.normsdist (@x float)
RETURNS float
AS
BEGIN
  declare @t float
  declare @z float
  declare @ans float

  declare @a1 float
  declare @a2 float
  declare @a3 float
  declare @a4 float
  declare @a5 float
  declare @a6 float
  declare @a7 float
  declare @a8 float
  declare @a9 float
  declare @a10 float

  set @a1 = 0.17087277
  set @a2 = -0.82215223
  set @a3 = 1.48851587
  set @a4 = -1.13520398
  set @a5 = 0.27886807
  set @a6 = -0.18628806
  set @a7 = 0.09678418
  set @a8 = 0.37409196
  set @a9 = 1.00002368
  set @a10 = 1.26551223

  set @z = ABS(@x)/SQRT(2)
  set @t = 1/(1+0.5*@z)
  set ans = @t*exp(-@z*@z-@a10+@t*(@a9+@t*(@a8+@t*(@a7+@t*(@a7+@t*(@a6+@t*(@a5+@t*(@a4+@t*(@a3+@t*(@a2+@t*@a1))))))))))
  IF (@X > 0)
    set @ans = 1-@ans
  return @ans
END

if object_id('normsinv') is not null
begin
  drop function normsinv
end
go

create function dbo.normsinv (@p float)
RETURNS float
as
BEGIN
  declare @zero decimal(2,1)
  declare @one int
  declare @half decimal(2,1)
  declare @split1 decimal(4,3)
  declare @split2 decimal(2,1)
  declare @const1 float
  declare @const2 float
  declare @q float
  declare @r float
  declare @PPND16 float

  set @zero = 0.0
  set @one = 1.0
  set @half = 0.5
  set @split1 = 0.425
  set @split3 = 5.0
  set @const1 = 0.180625
  set @const2 = 1.6

  declare @a0 float
  declare @a1 float
  declare @a2 float
  declare @a3 float
  declare @a4 float
  declare @a5 float
  declare @a6 float
  declare @a7 float
  set @a0 = 3.3871328727963665
  set @a1 = 133.14166789178438
  set @a2 = 1971.5909503065514
  set @a3 = 13731.693765509461
  set @a4 = 45921.95393154987
  set @a5 = 67265.7709270087
  set @a6 = 33430.575583588128
  set @a7 2509.0809287301227
  declare @b1 float
  declare @b2 float
  declare @b3 float
  declare @b4 float
  declare @b5 float
  declare @b6 float
  declare @b7 float
  set @b1 = 42.313330701600911
  set @b2 = 687.18700749205789
  set @b3 = 5394.1960214247511
  set @b4 = 21213.794301586597
  set @b5 = 39307.895800092709
  set @b6 = 28729.085735721943
  set @b7 = 5226.495278852544
  declare @c0 float
  declare @c1 float
  declare @c2 float
  declare @c3 float
  declare @c4 float
  declare @c5 float
  declare @c6 float
  declare @c7 float
  set @c0 = 1.4234371107496835
  set @c1 = 4.6303378461565456
  set @c2 = 5.769497221460691
  set @c3 = 3.6478483247632045
  set @c4 = 1.2704582524523684
  set @c5 = 0.24178072517745061
  set @c6 = 0.022723844989269184
  set @c7 = 0.00077454501427834139
  declare @d1 float
  declare @d2 float
  declare @d3 float
  declare @d4 float
  declare @d5 float
  declare @d6 float
  declare @d7 float
  declare @d8 float
  set @d1 = 2.053191626637759
  set @d2 = 1.6763848301838038
  set @d3 = 0.6897673349851
  set @d4 = 0.14810397642748008
  set @d5 = 0.0151986666563616457
  set @d6 = 0.00054759380849953455
  set @d7 = 0.0000000010507500716444169
  declare @e0 float
  declare @e1 float
  declare @e2 float
  declare @e3 float
  declare @e4 float
  declare @e5 float
  declare @e6 float
  declare @e7 float
  set @e0 = 6.6570946435011033
  set @e1 = 5.4637849111641144
  set @e2 = 1.7848265399172913
  set @e3 = 0.29656057182850487
  set @e4 = 0.026532189526576124
  set @e5 = 0.0012426609473880784
  set @e6 = 0.000027115555687434876
  set @e7 = 0.00000020103343992922882
  declare @f1 float
  declare @f2 float
  declare @f3 float
  declare @f4 float
  declare @f5 float
  declare @f6 float
  declare @f7 float
  set @f1 = 0.599832206555888
  set @f2 = 0.13692988092273581
  set @f3 = 0.014875361290850615
  set @f4 = 0.00078686913114561329
  set @f5 = 0.000018463183175100548
  set @f6 = 0.0000001421511758316446
  set @f7 = 0.0000000000000020442631033899397

  set @q = @p - @half

  if(ABS(@q)) <= @split1)
    begin
      set @r = @const1 - @q * @q
      set @PPND16 = @q * (((((((@a7*@r+@a6)*@r+@a5)*@r+@a4)*@r+@a3)*@r+@a2)*@r+@a1)*@r+@a0) / (((((((@b7*@r+@b6)*@r+@b5)*@r+@b4)*@r+@b3)*@r+@b2)*@r+@b1)*@r+@one)
      return @PPND16
    end
  else
    begin
      if(@q <0)
        set @r=@p
      else
        set @r = @one - @p

      if(@r <=@zero)
        begin
          set @PPND16 = @zero
          return @PPND
        end

      set @r=SQRT(-LOG(@r))

      if(@r <= @split2)
        begin
          set @r= @r - @const2
          set @PPND16 = (((((((@c7*@r+@c6)*@r+@c5)*@r+@c4)*@r+@c3)*@r+@c2)*@r+@c1)*@r+@c0) / (((((((@d7*@r+@d6)*@r+@d5)*@r+@d4)*@r+@d3)*@r+@d2)*@r+@d1)*@r+@one)
        end
      else
        begin
          set @r = @r - @split2
          set @PPND16 = (((((((@e7*@r+@e6)*@r+@e5)*@r+@e4)*@r+@e3)*@r+@e2)*@r+@e1)*@r+@e0) / (((((((@f7*@r+@f6)*@r+@f5)*@r+@f4)*@r+@f3)*@r+@f2)*@r+@f1)*@r+@one)
        end
      if(@q < @zero)
        set @PPND16 = -@PPND16
      return @PPDN16
    end
  return @PPDN16
END

/*test inverse function of the cumulative normal distribution function*/
--DROP TABLE ##TMP1;
--SELECT *
--dbo.normsinv(prop) AS norms_inv_out
--INTO ##TMP1
--FROM dbo.T1

--SELECT * FROM ##TMP1

/*1C. CREATE NORMAL DISTRIBUTION PROBABILITY DENSITY FUNCTION (I.E NOT CUMULATIVE)*/

/*2. CREATE SIMULATED TABLE WITH 1 MILLION RECORDS*/

/*2A. CREATE INITIAL VARIABLE FOR TABLE*/
/*--https://dba.stackexchange.com/questions/130392/generate-and-insert-1-million-rows-into-simple-table*/

if object_id('T1') is not null
begin
    drop table T1
end
go

WITH Ten(N) AS
(
  SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL
  SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL
  SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1
)
SELECT
  id = IDENTITY(int, 1, 1)
INTO dbo.T1
FROM Ten T10
CROSS JOIN Ten T100
--CROSS JOIN Ten T1000
--CROSS JOIN Ten T10000
--CROSS JOIN Ten T100000
--CROSS JOIN Ten T1000000
;

ALTER TABLE dbo.T1
ADD a AS CONVERT(varchar(11), id);

/*NB: NEED TO UPDATE ROW COUNT IN BELOW CALCULATION, DEPENDING ON TABLE SIZE*/
ALTER TABLE dbo.T1
ADD prop AS CONVERT(float, id/100.00);

/*3. CREATE A RANDOM VARIABLE FOR EACH ROW*/

/*3A. CREATE A VIEW THAT RETURNS SELECT RAND()*/
if object_id('cr_sample_randView') is not null
begin
  drop view cr_sample_randView
end
go

create view cr_sample_randView
as
select rand() as random_number
go

/*3B. CREATE A UDF THAT SELECTS THE VALUE FROM THE VIEW*/
if object_id('cr_sample_fnPerRowRand') is not null
begin
  drop function cr_sample_fnPerRowRand
end
go

create function cr_sample_fnPerRowRand()
returns float
as begin
  declare @returnValue float
  select @returnValue = random_number from cr_sample_randView
  return @returnValue
end
go

/*3C. Before selecting your data, seed the rand() function, and then use the UDF in your select statement.*/
--select rand(200); --see the rand() function
--with cte(id) as
--(select row_number() over(order by object_id) from sys.all_objects)
--select
--  id,
--  dbo.cr_sample_fnPerRowRand()
--from cte
--where id <= 1000  --limit the results to 1000 random numbers

/*4. BUILDING THE TABLE OUT TO CREATE THE TABLE REQUIRED AS INPUT TABLE TO RWA CALCUATION*/

/4a. Define the fields in the table*/
ALTER TABLE dbo.T1
ADD
  ACC_OWNER_ID varchar(50)
  ,START_DATE date
  ,R_PD float
  ,PRODUCT varchar(50)
  ,SUB_PRODUCT varchar(50)
  ,CRE_FLAG int
  ,Reg_CCF float
  ,DRAWN decimal(15,2)
  ,PROVISIONS decimal(15,2)
  ,UNDRAWN decimal(15,2)
  ,DEFAULT_STATUS varchar(10)
  ,COUNTRY varchar(100)
  ,ASSET_CLASS_IND int
  ,RISK_GRADE int
  ,BU_ID int
  ,BUS_UNIT varchar(50)
  ,SUB_BUSINESS_UNIT_NAME varchar(50)
  ,PRA_ASSET_CLASS varchar(50)
  ,SECTOR varchar(50)
  ,LEGAL_ENTITY varchar(50)
  ,DEFAULT_IND int
  ,RWA_SCALING int /*Using this field as the indicator for the FI Asset Correlation Scalar Indicator: if 0 then scalar = 1, if 1 then scalar = 1.25*/
  ,BASEL_APPROACH varchar(50)
  ,BASEL_ASSET_CLASS varchar(50)
  ,SLOTTING_CATEGORY int
  ,MATURITY float
  ,TURNOVER float
  ,SME_SCALAR float
  ,RATING_ID varchar(50)
  ,LGD_EXTERNAL float
  ,R_EAD float
  ,RAND_NORM_1 float
  ,RAND_NORM_2 float
  ,RAND_UNIF_1 float
  ,RAND_UNIF_2 float
  ,R float
  ,b float
  ,N float
  ,K float
  ,RW float
  ,RWA float
  ,R_EL float

/*4b. Simulate key variables, Step 1: Use Random Normal Variables to Generate Drawn and Undrawn.  Also allocate proportions of the population to asset classes*/

SELECT RAND(200) /*SET THE SEED TO MAKE RANDOM NUMBER GENERATION IN NET UPDATE REPLICABLE*/

UPDATE dbo.T1
  SET
  ,PRODUCT = 'GC (exc CRE)'
  ,CRE_FLAG = 0
  ,Reg_CCF float = 0.75
  ,DRAWN = (SQRT(-2*LOG(dbo.cr_sample_fnPerRowRand()))*SIN(2*PI()*dbo.cr_sample_fnPerRowRand())) * 6000000 + 2000000 /*random normal with mean 2,000,000 and standard deviation 6,000,000*/
  ,PROVISIONS decimal(15,2) = dbo.cr_sample_fnPerRowRand()
  ,UNDRAWN decimal(15,2) = (SQRT(-2*LOG(dbo.cr_sample_fnPerRowRand()))*SIN(2*PI()*dbo.cr_sample_fnPerRowRand())) * 12000000 + 2000000 /*random normal with mean 3,000,000 and standard deviation 12,000,000*/
  --,DEFAULT_STATUS varchar(10)
  --,COUNTRY varchar(100)
  --,ASSET_CLASS_IND int
  --,RISK_GRADE int
  --,BU_ID int
  --,BUS_UNIT varchar(50)
  --,SUB_BUSINESS_UNIT_NAME varchar(50)
  --,PRA_ASSET_CLASS varchar(50)
  --,SECTOR varchar(50)
  --,LEGAL_ENTITY varchar(50)
  --,DEFAULT_IND int
  ,RWA_SCALING =
  CASE WHEN prop <= 0.07 AND prop >0 THEN 1
  WHEN prop <= 0.9 and prop > 0.88 THEN 1
  ELSE 0 END
  ,BASEL_APPROACH =
  CASE WHEN PROP > 0.9 THEN 'Standardised'
  ELSE 0 END
  ,BASEL_ASSET_CLASS =
  CASE WHEN prop <= 0.75 AND prop > 0 THEN 'CORPORATES - MAIN'
  WHEN prop <= 0.85 AND prop >0.75 THEN 'CORPORATES - SME'
  WHEN prop <= 0.9 AND prop >0.85 THEN 'INSTITUTIONS'
  WHEN prop <= 0.98 AND prop >0.9 THEN 'CORPORATES'
  WHEN prop <= 0.9 THEN 'INSTITUTIONS'
  --,SLOTTING_CATEGORY int
  ,MATURITY = (SQRT(-2*LOG(dbo.cr_sample_fnPerRowRand()))*SIN(2*PI()*dbo.cr_sample_fnPerRowRand())) * 1.5 + 2.5 /*random normal with mean 2,000,000 and standard deviation 6,000,000*/
  ,TURNOVER = (SQRT(-2*LOG(dbo.cr_sample_fnPerRowRand()))*SIN(2*PI()*dbo.cr_sample_fnPerRowRand())) * 10 + 25 /*random normal with mean 2,000,000 and standard deviation 6,000,000*/
  ,SME_SCALAR =
  CASE WHEN prop <= 0.85 AND prop > 0.75 THEN 0.7619 /*F-IRB Corporate SME all set to have SME scalar*/
  WHEN prop <= 0.75 AND prop > 0.72 THEN 0.7619 /*F-IRB Corporate Main: small portion set to have SME scalar*/
  WHEN prop <= 0.86 AND prop > 0.85 THEN 0.7619 /*F-IRB Institutions: small portion set to have SME scalar*/
  ELSE 1 END
  ,RATING_ID = 'corp'
  ,LGD_EXTERNAL = 45/100.00
  --,R_EAD float
  ,RAND_NORM_1 = (SQRT(-2*LOG(dbo.cr_sample_fnPerRowRand()))*SIN(2*PI()*dbo.cr_sample_fnPerRowRand()))
  ,RAND_NORM_2 = (SQRT(-2*LOG(dbo.cr_sample_fnPerRowRand()))*SIN(2*PI()*dbo.cr_sample_fnPerRowRand()))
  ,RAND_UNIF_1 = dbo.cr_sample_fnPerRowRand()
  ,RAND_UNIF_2 = dbo.cr_sample_fnPerRowRand()

/*4c. Merge on rating information to generate PDs and Provision rates.
To control distribution across rating grades, took proportions from Global Corporates (exc CRE) Dec, generated cumulative percentiles, turned those into thresholds in normal space
and then compared random norm variables to thresholds.
This step merges on info based on the random normal variable outturn compared to the thresholds
RATING_INFO table imported into DB as a csv file*/

if object_id('T2') is not null
begin
  drop table T2
end
go

select
*
into T2
from T1
join RATING_INFO
--option SUBINTERVAL
on T1.RAND_NORM_1 < RATING_INFO.FREQ_THRESH_UPPER and T1.RAND_NORM_1 >= RATING_INFO.FREQ_THRESH_LOWER

drop table T1

/4d. Cap and Floor fields where appropriate (wouldn't need to do that if 'Greatest' and 'Least' functions supported).
Also make 'second step' adjustments where field values depend on outcomes of first update*/

UPDATE dbo.T2
  SET
  R_PD = CONVERT(float, R_PD_PC/100.0000)
  ,DRAWN =
  CASE WHEN DRAWN < 0 THEN 0
  ELSE DRAWN END

  ,UNDRAWN =
  CASE WHEN (DRAWN < 0) AND (UNDRAWN < 0) THEN 0
  WHEN (DRAWN < 0) AND (UNDRAWN >0) THEN UNDRAWN * 0.5 * PROV_RATE_PC
  WHEN (DRAWN > 0) AND (UNDRAWN <0) THEN DRAWN * PROV_RATE_PC
  ELSE (DRAWN + 0.5 * UNDRAWN) * PROV_RATE_PC END

  ,DEFAULT_STATUS =
  CASE WHEN CMS_RATING = 20 THEN 'DEF'
  ELSE 'NOT_DEF' END

  ,COUNTRY =
  /*BOS COUNTRY DISTRIBUTION*/
  CASE WHEN (RAND_UNIF_1 <= 0.09580038) AND (RAND_UNIF_2 <= 0.002325581) THEN 'AMERICAS'
  WHEN (RAND_UNIF_1 <= 0.09580038) AND (RAND_UNIF_2 > 0.002325581) AND (RAND_UNIF_2 <= 0.004651163) THEN 'MIDDLE EAST'
  WHEN (RAND_UNIF_1 <= 0.09580038) AND (RAND_UNIF_2 > 0.004651163) AND (RAND_UNIF_2 <= 0.990697674) THEN 'UNITED KINGDOM OF GREAT BRITAIN AND NORTHERN IRELAND'
  WHEN (RAND_UNIF_1 <= 0.09580038) AND (RAND_UNIF_2 > 0.990697674) AND (RAND_UNIF_2 <= 1) THEN 'UNITED STATES OF AMERICA'

  /*LLOYDS COUNTRY DISTRIBUTION*/
  WHEN (RAND_UNIF_1 > 0.09580038) AND (RAND_UNIF_1 <= 0.84159519) AND (RAND_UNIF_2 <= 0.0003970881) THEN 'AFRICA'
  WHEN (RAND_UNIF_1 > 0.09580038) AND (RAND_UNIF_1 <= 0.84159519) AND (RAND_UNIF_2 > 0.0003970881) AND (RAND_UNIF_2 <= 0.0018937284) THEN 'AMERICAS'
  WHEN (RAND_UNIF_1 > 0.09580038) AND (RAND_UNIF_1 <= 0.84159519) AND (RAND_UNIF_2 > 0.0018937284) AND (RAND_UNIF_2 <= 0.005426870) THEN 'ASIA'
  WHEN (RAND_UNIF_1 > 0.09580038) AND (RAND_UNIF_1 <= 0.84159519) AND (RAND_UNIF_2 > 0.005426870) AND (RAND_UNIF_2 <= 0.060754467) THEN 'EURO AREA'
  WHEN (RAND_UNIF_1 > 0.09580038) AND (RAND_UNIF_1 <= 0.84159519) AND (RAND_UNIF_2 > 0.060754467) AND (RAND_UNIF_2 <= 0.064857710) THEN 'GERMANY'
  WHEN (RAND_UNIF_1 > 0.09580038) AND (RAND_UNIF_1 <= 0.84159519) AND (RAND_UNIF_2 > 0.064857710) AND (RAND_UNIF_2 <= 0.070284580) THEN 'OTHER EUROPE'
  WHEN (RAND_UNIF_1 > 0.09580038) AND (RAND_UNIF_1 <= 0.84159519) AND (RAND_UNIF_2 > 0.070284580) AND (RAND_UNIF_2 <= 0.9522171) THEN 'UNITED KINGDOM OF GREAT BRITAIN AND NORTHERN IRELAND'
  WHEN (RAND_UNIF_1 > 0.09580038) AND (RAND_UNIF_1 <= 0.84159519) AND (RAND_UNIF_2 > 0.9522171) THEN 'UNITED STATES OF AMERICA'

  /*LLOYDS COUNTRY DISTRIBUTION*/
  WHEN (RAND_UNIF_1 > 0.84159519) AND (RAND_UNIF_2 <= 0.001779359) THEN 'AMERICAS'
  WHEN (RAND_UNIF_1 > 0.84159519) AND (RAND_UNIF_2 > 0.001779359) AND (RAND_UNIF_2 <= 0.049822064) THEN 'ASIA'
  WHEN (RAND_UNIF_1 > 0.84159519) AND (RAND_UNIF_2 > 0.049822064) AND (RAND_UNIF_2 <= 0.078291815) THEN 'EURO AREA'
  WHEN (RAND_UNIF_1 > 0.84159519) AND (RAND_UNIF_2 > 0.078291815) AND (RAND_UNIF_2 <= 0.080071174) THEN 'GERMANY'
  WHEN (RAND_UNIF_1 > 0.84159519) AND (RAND_UNIF_2 > 0.080071174) AND (RAND_UNIF_2 <= 0.122775801) THEN 'OTHER EUROPE'
  WHEN (RAND_UNIF_1 > 0.84159519) AND (RAND_UNIF_2 > 0.122775801) AND (RAND_UNIF_2 <= 0.4252669) THEN 'UNITED KINGDOM OF GREAT BRITAIN AND NORTHERN IRELAND'
  WHEN (RAND_UNIF_1 > 0.84159519) AND (RAND_UNIF_2 > 0.4252669) THEN 'UNITED STATES OF AMERICA'

  END

  ,ASSET_CLASS_IND =
  CASE WHEN BASEL_ASSET_CLASS = 'CORPORATES - SME' THEN 2
  WHEN BASEL_ASSET_CLASS = 'RETAIL, OF WHICH SME' THEN 3
  WHEN BASEL_ASSET_CLASS = 'RETAIL MORTGAGES' THEN 4
  WHEN BASEL_ASSET_CLASS = 'SUPERVISORY SLOTTING' THEN 5
  WHEN BASEL_APPROACH ='Standardised' THEN 6
  WHEN RWA_SCALING = 1 THEN 7
  ELSE 1 END

  ,RISK_GRADE = CMS_RATING
  --,BU_ID int
  --,BUS_UNIT varchar(50)
  --,SUB_BUSINESS_UNIT_NAME varchar(50)
  --,PRA_ASSET_CLASS varchar(50)
  --,SECTOR varchar(50)

  ,LEGAL_ENTITY =
  CASE WHEN RAND_UNIF_1 <= 0.09580038 THEN 'BOS'
  WHEN (RAND_UNIF_1 > 0.09580038) AND (RAND_UNIF_1 <= 0.84159519) THEN 'LLOY'
  WHEN (RAND_UNIF_1 > 0.84159519) AND (RAND_UNIF_1 <= 1) THEN LBCM
  END

  ,DEFAULT_IND =
  CASE WHEN CMS_RATING = 20 THEN 1
  ELSE 0 END
  --,RWA_SCALING float
  --,SLOTTING_CATEGORY int
  ,MATURITY =
  CASE WHEN MATURITY < 1 THEN 1
  WHEN MATURITY > 5 THEN 5
  ELSE MATURITY END

  ,TURNOVER =
  CASE WHEN TURNOVER < 5 THEN 5
  WHEN TURNOVER > 50 THEN 50
  ELSE TURNOVER END

  --,SME_SCALAR
  --,RATING_ID
  --,LGD_EXTERNAL

  ,R_EAD =
  CASE WHEN (DRAWN < 0) AND (UNDRAWN < 0) THEN 0
  WHEN (DRAWN < 0) AND (UNDRAWN > 0) THEN Reg_CCF * UNDRAWN
  WHEN (DRAWN > 0) AND (UNDRAWN < 0) THEN DRAWN
  ELSE DRAWN + Reg_CCF * UNDRAWN END

/*NEED TO THINK ABOUT DOING THIS FOR EACH BU - I.E PROPORTIONS TAKEN FOR EACH BU*/

/*5. CALCULATE RWA*/

UPDATE dbo.T2
  SET
  R =
  CASE WHEN ASSET_CLASS_IND = 1 THEN
  0.12 * (1 - EXP(-50 * R_PD))/(1 - EXP(-50)) + 0.24 * (1 - (1 - EXP(-50 * R_PD))/(1 - EXP(-50)))
  WHEN ASSET_CLASS_IND = 2 THEN
  0.12 * (1 - EXP(-50 * R_PD))/(1 - EXP(-50)) + 0.24 * (1 - (1 - EXP(-50 * R_PD))/(1 - EXP(-50))) - 0.04 * (1 - (TURNOVER - 5)/45)
  WHEN ASSET_CLASS_IND = 3 THEN
  0.03 * (1 - EXP(-35 * R_PD))/(1 - EXP(-35)) + 0.16 * (1 - (1 - EXP(-35 * R_PD))/(1 - EXP(-35)))
  WHEN ASSET_CLASS_IND = 4 THEN
  0.15
  WHEN ASSET_CLASS_IND = 7 THEN
  0.12 * (1 - EXP(-50 * R_PD))/(1 - EXP(-50)) + 0.24 * (1 - (1 - EXP(-50 * R_PD))/(1 - EXP(-50))) * 1.25
  END

  ,b=POWER((0.11852 - 0.05478 * LOG(R_PD)),2)

UPDATE dbo.T2
  SET
  N =
  POWER((1 - R),-0.5)*dbo.normsinv(R_PD)+POWER((R/(1 - R)),0.5)*dbo.normsinv(0.999)

UPDATE dbo.T2
  SET
  K =
  CASE WHEN ASSET CLASS_IND = 1 THEN
  (dbo.normsdist(N) - R_PD) / (1 - 1.5*b) * (1 + (MATURITY - 2.5) * b) * SME_SCALAR END

  ,RW =
  /*RW = K * LGD * 12.5 * 1.06*/
  CASE WHEN ASSET_CLASS_IND = 1 THEN
  (dbo.normsdist(N) - R_PD) / (1 - 1.5*b) * (1 + (MATURITY - 2.5) * b) * SME_SCALAR * LGD_EXTERNAL * 12.5 * 1.06 END

  ,RWA =
  /*RWA = RW * EAD*/
  CASE WHEN ASSET_CLASS_IND <= 2 OR ASSET_CLASS_IND = 7 THEN
  (dbo.normsdist(N) - R_PD) / (1 - 1.5*b) * (1 + (MATURITY - 2.5) * b) * SME_SCALAR * LGD_EXTERNAL * 12.5 * 1.06 * EAD
  WHEN ASSET_CLASS_IND >= 3 AND ASSET_CLASS_IND <=4 THEN
  (dbo.normsdist(N) - R_PD) * SME_SCALAR * LGD_EXTERNAL * 12.5 * 1.06 * EAD END

  ,R_EL = R_PD * LGD_EXTERNAL * R_EAD
