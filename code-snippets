#open mysql in command line - enter
sudo /usr/local/mysql/bin/mysql -u root -p

#create database

CREATE DATABASE DB_SIMULATED_RWA;
USE DB_SIMULATED_RWA

#STEP 1: create table with 1 million rows

#https://dba.stackexchange.com/questions/130392/generate-and-insert-1-million-rows-into-simple-table
USE DB_SIMULATED_RWA
DROP TABLE t1;
CREATE TABLE t1 (id int);
INSERT INTO t1 (id)
WITH
  L0   AS (SELECT c FROM (SELECT 1 UNION ALL SELECT 1) AS D(c)), -- 2^1
  L1   AS (SELECT 1 AS c FROM L0 AS A CROSS JOIN L0 AS B),       -- 2^2
  L2   AS (SELECT 1 AS c FROM L1 AS A CROSS JOIN L1 AS B),       -- 2^4
  L3   AS (SELECT 1 AS c FROM L2 AS A CROSS JOIN L2 AS B),       -- 2^8
  L4   AS (SELECT 1 AS c FROM L3 AS A CROSS JOIN L3 AS B),       -- 2^16
  L5   AS (SELECT * FROM L4 UNION ALL SELECT * FROM L4),         -- 2*2^16
  L6   AS (SELECT * FROM L5 UNION ALL SELECT * FROM L5),         -- 4*2^16
  L7   AS (SELECT * FROM L6 UNION ALL SELECT * FROM L6),         -- 8*2^16
  L8   AS (SELECT * FROM L7 UNION ALL SELECT * FROM L7),         -- 16*2^16
  Nums AS (SELECT ROW_NUMBER() OVER(ORDER BY (SELECT NULL)) AS k FROM L8)

SELECT k as id
FROM Nums
WHERE k <= 1000000;

SELECT * FROM t1
LIMIT 10;

#create tables

DROP TABLE RATING_SCALES;
CREATE TABLE RATING_SCALES AS (
(SELECT id
, RATING_GRADE INTEGER(2)
, RATING_CALCE VARCHAR(20)
, REGULATORY_PD FLOAT(24)
, NORMS_INV_PD FLOAT(24)
FROM t1)
);

CREATE TABLE LOANS_TABLE (
END_OF_PERIOD_BALANCE FLOAT(size=10, d=2)
, UNDRAWN_AMOUNT FLOAT(size=10, d=2)
, TOTAL_RETURN_SWAP_ASSET_OFFSETTING_DETERIORATION_FLAG FLOAT(size=10,2)
, PRODUCT_CODE VARCHAR(20)
, GAAP_CODE VARCHAR(20)
, ACCOUNT_OR_CONTRACT_NUMBER INTEGER(2)
, EXPOSURE_DEFAULTED_FLAG VARCHAR(20)
, FI_SCALAR INTEGER(2)
, SME_SCALAR INTEGER(2)
, READ FLOAT(size=10, d=2)
, REL FLOAT(size=10, d=2)
, RWA FLOAT(size=10, d=2)
, TURNOVER FLOAT(size=10, d=2)
)

#create loans table

#create rating table

############################################
#SCRATCHPAD
############################################

#javascript based udf function to calculate normal cdf
CREATE TEMP FUNCTION normcdf(X FLOAT64)
RETURNS FLOAT64
LANGUAGE js
AS r"""
  var T=1/(1+.2316419*Math.abs(X));
  var D=.3989423*Math.exp(-X*X/2);
  var Prob=D*T*(.3193815+T*(-.3565638+T*(1.781478+T*(-1.821256+T*1.330274))));
  if (X>0) {
    Prob=1-Prob
  }
  return Prob;
""";




CREATE TEMP FUNCTION multiplyInputs(x FLOAT64, y FLOAT64)
RETURNS FLOAT64
LANGUAGE js
AS r"""
  return x*y;
""";

WITH numbers AS
  (SELECT 1 AS x, 5 as y
  UNION ALL
  SELECT 2 AS x, 10 as y
  UNION ALL
  SELECT 3 as x, 15 as y)
SELECT x, y, multiplyInputs(x, y) AS product
FROM numbers;








SET GLOBAL log_bin_trust_function_creators = 1;
#https://stackoverflow.com/questions/7447724/calculating-a-norm-distribution-in-mysql
delimiter //
create Function CND (_X double)
returns float
begin
    set @X = _X;
    set @a1 = 0.31938153;
    set @a2 = -0.356563782;
    set @a3 = 1.781477937;
    set @a4 = -1.821255978;
    set @a5 = 1.330274429;
    set @L = Abs(@X);
    set @K = 1 / (1 + 0.2316419 * @L);
    set @CND1 = 1 - 1 / Sqrt(2 * Pi()) * Exp(-power(@L,2) / 2) * (@a1 * @K +
        @a2 * power(@K,2) + @a3 * power(@K,3) + @a4 * power(@K,4) + @a5 *
        power(@K,5));

    if @X < 0 then
        set @CND1 = 1 - @CND1;
    end if;

    return @CND1;
end //
delimiter ;


delimiter //
CREATE FUNCTION NORMINV(p double, mu double, sigma double)
RETURNS decimal(20,6)
begin
    declare q   double;
    declare r   double;
    declare val double;
BEGIN
    IF p < 0 OR p > 1 THEN
        signal sqlstate '20100' set message_text= 'The probality p must be bigger than 0 and smaller than 1';
    END IF;
    IF sigma < 0 THEN
        signal sqlstate '20100' set message_text=  'The standard deviation sigma must be positive';
    END IF;
    IF p = 0 THEN
        RETURN to_binary_double('-INF');
    END IF;
    IF p = 1 THEN
        RETURN to_binary_double('INF');
    END IF;
    IF sigma = 0 THEN
        RETURN mu;
    END IF;

    set q:= p - 0.5;

    IF(ABS(q) <= .425) THEN
            set r:= .180625 - q * q;
            set val :=
                 q * (((((((r * 2509.0809287301226727 +
                            33430.575583588128105) * r + 67265.770927008700853) * r +
                          45921.953931549871457) * r + 13731.693765509461125) * r +
                        1971.5909503065514427) * r + 133.14166789178437745) * r +
                      3.387132872796366608)
                 / (((((((r * 5226.495278852854561 +
                          28729.085735721942674) * r + 39307.89580009271061) * r +
                        21213.794301586595867) * r + 5394.1960214247511077) * r +
                      687.1870074920579083) * r + 42.313330701600911252) * r + 1);
    ELSE
        /* r = min(p, 1-p) < 0.075 */
        IF q > 0 THEN
            set r:= 1 - p;
        ELSE
            set r:= p;
        END IF;

        set r:= SQRT(-LN(r));
        /* r = sqrt(-log(r))  <==>  min(p, 1-p) = exp( - r^2 ) */

        IF (r <= 5) THEN
            set r:= r - 1.6;
            set val := (((((((r * 7.7454501427834140764e-4 +
                         .0227238449892691845833) * r + .24178072517745061177) *
                       r + 1.27045825245236838258) * r +
                      3.64784832476320460504) * r + 5.7694972214606914055) *
                    r + 4.6303378461565452959) * r +
                   1.42343711074968357734)
                  / (((((((r *
                           1.05075007164441684324e-9 + 5.475938084995344946e-4) *
                          r + .0151986665636164571966) * r +
                         .14810397642748007459) * r + .68976733498510000455) *
                       r + 1.6763848301838038494) * r +
                      2.05319162663775882187) * r + 1);
        ELSE /* very close to  0 or 1 */
            set r := r - 5;
            set val := (((((((r * 2.01033439929228813265e-7 +
                         2.71155556874348757815e-5) * r +
                        .0012426609473880784386) * r + .026532189526576123093) *
                      r + .29656057182850489123) * r +
                     1.7848265399172913358) * r + 5.4637849111641143699) *
                   r + 6.6579046435011037772)
                  / (((((((r *
                           2.04426310338993978564e-15 + 1.4215117583164458887e-7) *
                          r + 1.8463183175100546818e-5) * r +
                         7.868691311456132591e-4) * r + .0148753612908506148525)
                       * r + .13692988092273580531) * r +
                      .59983220655588793769) * r + 1);
        END IF;

        IF q < 0.0 THEN
            set val := -val;
        END IF;
    END IF;

    RETURN mu + sigma * val;
END;
END //
delimiter ;
